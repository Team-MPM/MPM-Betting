@using Blazorise.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel.Betting
@using MPM_Betting.DataModel.User
@using Microsoft.AspNetCore.Components.Forms
@namespace MPM_Betting.Blazor.ComponentLibrary.DesktopView

@inject UserManager<MpmUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="NavBar flex flex-row justify-between align-center">
    <div class="nav-left flex flex-row h-full align-center">
        <div class="logo">
            <a href="/" class="NoHoverUnderline">
                <span class="NavBarLogoText">MPM</span>
            </a>
        </div>

        <ul class="nav-list">
            <li>
                <a href="/dashboard" class="NoHoverUnderline nav-link @(NavigationManager.Uri.Contains("dashboard") ? "nav-active" : "")">
                    Dashboard
                </a>
            </li>
            <li>
                <a href="/groups" class="NoHoverUnderline nav-link @(NavigationManager.Uri.Contains("groups") ? "nav-active" : "")">
                    Groups
                </a>
            </li>
        </ul>

        <div class="nav-sport-menu">
            <Select @bind-SelectedValue="@SportType">
                <SelectItem Value="@ESportType.None">None</SelectItem>
                <SelectItem Value="@ESportType.Football">Football</SelectItem>
                <SelectItem Value="@ESportType.Basketball">Basketball</SelectItem>
                <SelectItem Value="@ESportType.Tennis">Tennis</SelectItem>
                <SelectItem Value="@ESportType.Hockey">Hockey</SelectItem>
                <SelectItem Value="@ESportType.Baseball">Baseball</SelectItem>
                <SelectItem Value="@ESportType.AmericanFootball">American Football</SelectItem>
                <SelectItem Value="@ESportType.Formula1">Formula1</SelectItem>
                <SelectItem Value="@ESportType.Handball">Handball</SelectItem>
                <SelectItem Value="@ESportType.Volleyball">Volleyball</SelectItem>
            </Select>
        </div>
    </div>


    <div class="nav-right flex flex-row mr-4">
        @if (m_UserInstance is null)
        {
            <div>
                <Button Color="Color.Primary" Clicked="@(() => NavigationManager.NavigateTo(LoginUrl))">Login</Button>
                <Button Color="Color.Primary" Clicked="@(() => NavigationManager.NavigateTo(RegisterUrl))">Register</Button>
            </div>
        }
        else
        {
            <Dropdown>
                <DropdownToggle Color="Color.Dark" Border="null">
                    <img src="@m_ImageUrl" alt="Profile Picture" class="profile-picture"/>
                </DropdownToggle>
                <DropdownMenu>
                    <DropdownItem><a href="/bets/history" class="NoHoverUnderline">Bet History</a></DropdownItem>
                    <DropdownItem><a href="/groups" class="NoHoverUnderline">Groups</a></DropdownItem>
                    <DropdownItem><a href="/inventory" class="NoHoverUnderline">Inventory</a></DropdownItem>
                    <DropdownDivider/>
                    <DropdownItem><a href="/profile" class="NoHoverUnderline">Profile</a></DropdownItem>
                    <DropdownItem><a href="/account/manage" class="NoHoverUnderline">Manage</a></DropdownItem>
                    <DropdownItem>
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken/>
                            <input type="hidden" name="ReturnUrl" value=""/>
                            <button type="submit">
                                <a class="NoHoverUnderline" aria-hidden="true">Logout</a> 
                            </button>
                        </form>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        }
    </div>
</div>

@code {
    [Parameter] public ESportType SportType { get; set; } = ESportType.None;

    [CascadingParameter] private SyncContextWithPayload<MpmUser> User { get; set; } = default!;
    MpmUser? m_UserInstance;
    
    private string m_ImageUrl = "./Images/default-profile-picture.png";

    const string LoginUrl = "/account/login";
    const string RegisterUrl = "/account/register";
    
    protected override async Task OnInitializedAsync()
    {
        await User.SyncEvent.Task;
        if (User.Payload is not null)
        {
            m_UserInstance = User.Payload;
        }
        else
        {
            return;
        }
        
        // m_ImageUrl = m_UserInstance.ProfilePictureUrl.IsNullOrEmpty() ? m_UserInstance?.ProfilePictureUrl : m_ImageUrl;
        m_ImageUrl = "./Images/default-profile-picture.png";
    }

}