@namespace MPM_Betting.Blazor.ComponentLibrary.DesktopView
@using MPM_Betting.Services.Data
@using MPM_Betting.Blazor.ComponentLibrary.DesktopView.SmallComponents
@using Blazorise
@using Microsoft.AspNetCore.Authorization
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel.User
@using MPM_Betting.Services.Domains
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject UserDomain UserDomain
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="row GroupsContainer">
    <div class="col-11 GroupsMainBox" onclick="@SwitchToGroups">
        <h2 class="pt-3 fw-bold">Your Groups</h2>
        <div class="line"></div>
        
        @if(GroupsList == null)
        {
            <div> Loading...</div>
        }
        else if (GroupsList.Count == 0)
        {
            <div class="NoGroupsLayout">
                <div class="fs-5"> You are not in any groups yet. </div>
            </div>
        }
        else
        {
            @foreach(var group in GroupsList)
            {
                <div class="GroupEntry row">
                    <img class="col-2" src="./Images/Logo_cropped.png"/>
                    <div class="col-7">@group.Name</div>
                    @* TODO Abfrage >:c *@
                    @switch(1)
                    {
                        case 1:
                            <div class="col-3 gold">1st</div>
                            break;
                        case 2:
                            <div class="col-3 silver">2nd</div>
                            break;
                        case 3:
                            <div class="col-3 bronze">3rd</div>
                            break;
                        default:
                            <div class="col-3">4th</div>
                            break;
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter] private SyncContextWithPayload<MpmUser>? UserTask { get; set; }
    MpmUser? User;
    public List<MpmGroup> GroupsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserTask is null)
            return;
        
        await UserTask.SyncEvent.Task;
        
        if (UserTask.Payload is not null)
            User = UserTask.Payload;    
        
        if (User is null) return;
        UserDomain.SetUser(User);
        var groupResult = await UserDomain.GetGroups();
        if (groupResult.IsSuccess)
        {
            GroupsList = groupResult.Value;
            StateHasChanged();
        }
    }
    
    private void SwitchToGroups()
    {
        NavigationManager.NavigateTo("/groups");
    }

    public class TestGroups
    {
        public TestGroups() {}

        public TestGroups(string name, int members, string description, int points, int position)
        {
            Name = name;
            Members = members;
            Description = description;
            Points = points;
            Position = position;
        }
        
        public string Name { get; set; }
        public int Members { get; set; }
        public string Description { get; set; }
        public int Points { get; set; }
        public int Position { get; set; }
    }
    
    
    

}