@namespace MPM_Betting.Blazor.ComponentLibrary.DesktopView
@using Blazorise
@using LanguageExt.ClassInstances.Const
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.ApiExplorer
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel.Betting
@using MPM_Betting.DataModel.User
@using MPM_Betting.Services.Data
@inject FootballApi Api
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@attribute [Authorize]


@if (SelectedTeams != null)
{
    <Modal @ref="modalRef" Class="ModalSettings">
        <ModalContent Centered>
            <ModalHeader Background="Background.Dark">
                <ModalTitle TextColor="TextColor.Default">Enter a new Bet</ModalTitle>
                <CloseButton TextColor="TextColor.White"/>
            </ModalHeader>
            <ModalBody Background="Background.Dark" Class="ModalSettings">
                <Field>
                    <h4 class="fw-bold">@SelectedTeams.Item1.Item1.Name.ToString() vs @SelectedTeams.Item1.Item2.Name.ToString()</h4>
                </Field>
                <Divider></Divider>
                <Field>
                    <div class="ModalTeamEntries ModalEntries" >
                        <span>Home Win</span>
                        <span>Draw</span>
                        <span>Away Win</span>
                    </div>
                    <div class="ModalBetEntries ModalEntries">
                        <span class="BetEntry @(ChosenTeam == BetType.HomeWin ? "ModalActiveBet" : "")" onclick="@(() => SetChosenTeam(BetType.HomeWin))">x @SelectedTeams.Item2.HomeWinPayOut</span>
                        <span class="BetEntry @(ChosenTeam == BetType.Draw ? "ModalActiveBet" : "")" onclick="@(() => SetChosenTeam(BetType.Draw))">x @SelectedTeams.Item2.DrawPayOut</span>
                        <span class="BetEntry @(ChosenTeam == BetType.AwayWin ? "ModalActiveBet" : "")" onclick="@(() => SetChosenTeam(BetType.AwayWin))">x @SelectedTeams.Item2.AwayWinPayOut</span>
                    </div>
                </Field>
                <Field>
                    <FieldLabel>Amount of credits to bet:</FieldLabel>
                    <Validation UsePattern>
                        <TextEdit Text="@BetAmount" TextChanged="@OnTextChanges" Pattern="^[1-9][0-9]*$" Placeholder="Enter Credits">
                            
                        </TextEdit>
                    </Validation>
                </Field>
                @if (ModalErrorMessage != null)
                {
                    <Divider/>
                <Field>
                    <div class="ModalError ErrorMessage">
                        <div>@ModalErrorMessage</div>
                    </div>
                </Field>
                }
            </ModalBody>
            <ModalFooter Background="Background.Dark">
                <Button Color="Blazorise.Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Blazorise.Color.Primary" Clicked="@PlaceBet">Place Bet</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else
{
    <Modal @ref="modalRef" Class="ModalSettings">
        <ModalContent Centered>
            <ModalHeader Background="Background.Dark">
                <ModalTitle>Error Loading</ModalTitle>
                <CloseButton/>
            </ModalHeader>
            <ModalBody Background="Background.Dark" Class="ModalSettings">
                <Field>
                    <FieldLabel>Either try again or refresh the page</FieldLabel>
                </Field>
            </ModalBody>
            <ModalFooter Background="Background.Dark">
                <Button Color="Blazorise.Color.Primary" Clicked="@HideModal">OK</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<div class="MatchesDate">
    <MatchesDatePicker MatchesPage="this"/>
</div>

<Divider/>

<div class="MatchesBox">
    <h2>Matches</h2>
    <Divider/>
    <div class="MatchLeagueBoxes">
        @if (GameEntries == null)
        {
            <div>Loading</div>
        }
        else
        {
            @foreach(var league in TopLeagues)
            {
                <div class="MatchLeagueEntry">
                <div class="MatchLeagueEntryName">@league.Name</div>
                @if (GameEntries.ContainsKey(league.Id) && GameEntries[league.Id].Count > 0)
                {
                    <div class="LeagueMatches">
                    @foreach (var match in GameEntries[league.Id])
                    {
                        <div class="MatchEntry">
                            <div class="MatchInfo">
                                <img class="Match_HomeLogo" src="https://images.fotmob.com/image_resources/logo/teamlogo/@(match.Score.HomeTeam.Id).png"/>
                                <div class="MatchHomeTeam">@match.Score.HomeTeam.Name</div>
                                <div class="MatchScore">
                                    <span>@match.Score.HomeScore</span>
                                    <span>:</span>
                                    <span>@match.Score.AwayScore</span>
                                    <div>@match.StartTime</div>
                                </div>
                                <div class="MatchAwayTeam">@match.Score.AwayTeam.Name</div>
                                <img class="Match_HomeLogo" src="https://images.fotmob.com/image_resources/logo/teamlogo/@(match.Score.AwayTeam.Id).png"/>
                            </div>
                            <div class="MatchInfoDivider"></div>
                            <div class="BetsInfo">
                               @foreach (var entry in GameBetEntries.Where(s => s.Item1 == match).Select(s => s.Item2))
                               {
                                   <div class="col-4 ">
                                       <div>1</div>
                                       <span onclick="@(() => EnterSelectedTeamsAndQuotes(match.Score.HomeTeam, match.Score.AwayTeam, entry, BetType.HomeWin))">@entry.HomeWinPayOut</span>
                                   </div>
                                   <div class="col-4">
                                       <div>X</div>
                                       <span onclick="@(() => EnterSelectedTeamsAndQuotes(match.Score.HomeTeam, match.Score.AwayTeam, entry, BetType.Draw))">@entry.DrawPayOut</span>
                                   </div>
                                   <div class="col-4">
                                       <div>2</div>
                                       <span onclick="@(() => EnterSelectedTeamsAndQuotes(match.Score.HomeTeam, match.Score.AwayTeam, entry, BetType.AwayWin))">@entry.AwayWinPayOut</span>
                                   </div>
                               }
                            </div>
                        </div>
                    }
                    </div>
                }
                else
                {
                    <div class="NoMatchesError">
                        <div class="pt-5"></div>
                        No Matches Found!
                        <div class="pb-3"></div>
                    </div>
                }
                </div>
            }
        }
    </div>
</div>




 
@code {
    [CascadingParameter] private SyncContextWithPayload<MpmUser>? UserTask { get; set; }
    MpmUser? User;
    
    [Parameter] public List<FootballApi.League> Leagues { get; set; }
    public List<FootballApi.League>? TopLeagues { get; set; }

    public Dictionary<int, List<FootballApi.GameEntry>>? GameEntries { get; set; }
    public Dictionary<int, List<FootballApi.GameEntry>>? AllGameEntries { get; set; }
    public List<Tuple<FootballApi.GameEntry, BetEntries>> GameBetEntries { get; set; }
    private DateTime selectedDate;

    public DateTime SelectedDate
    {
        get => selectedDate;
        set
        {
            selectedDate = value;
            StateHasChanged();
            RefreshMatches();
        }
    }

    protected override async Task OnInitializedAsync()
    {


        // int[] ids = { 47, 42, 73, 78, 55, 54, 37, 22, 32, 120 }; // Old Ligues
        int[] ids = { 47,54,87,53,55,61,57 };
        TopLeagues = Leagues.Where(s => ids.Contains(s.Id)).OrderBy(s => s.Id).ToList();
        await RequestFillMatches();
        ChosenTeam = BetType.None;
        if (UserTask is null)
            return;
        
        await UserTask.SyncEvent.Task;
        
        if (UserTask.Payload is not null)
            User = UserTask.Payload;    
    }

    private async Task RequestFillMatches()
    {
        AllGameEntries = new Dictionary<int, List<FootballApi.GameEntry>>();
        foreach (var league in TopLeagues)
        {
            var result = await Api.GetGameEntries(league.Id, null);

            if (result.IsSuccess)
            {
                AllGameEntries.Add(league.Id, result.Value);
            }
               
        }
        RefreshMatches();
    }

    private void RefreshMatches()
    {
        GameEntries = new Dictionary<int, List<FootballApi.GameEntry>>();
        foreach (var league in AllGameEntries)
        {
            GameEntries.Add(league.Key, league.Value.Where(s => DateOnly.FromDateTime(s.StartTime) == DateOnly.FromDateTime(SelectedDate)).ToList());
        }

        GameBetEntries = new List<Tuple<FootballApi.GameEntry, BetEntries>>();
        foreach (var league in GameEntries)
        {
            foreach (var game in league.Value)
            {
                GameBetEntries.Add(new Tuple<FootballApi.GameEntry, BetEntries>(game, new BetEntries(2.26, 1.99, 1.45)));
            }
        }
    }

    private async Task FillMatchesNoApi()
    {
        GameEntries = new Dictionary<int, List<FootballApi.GameEntry>>();
        foreach (var league in TopLeagues)
        {
            GameEntries.Add(league.Id, new List<FootballApi.GameEntry>()
            {
                new FootballApi.GameEntry(1, new FootballApi.ScoreEntry() { HomeScore = 1, AwayScore = 2, HomeTeam = new FootballApi.Team(1, "erfgthzewdesfgfrdedfrgfredfrgfrdedfsgrdefsgfredfsrfewsdsfgfrgfdwrfgttrfghn"), AwayTeam = new FootballApi.Team(2, "yyy") }, DateTime.Now, "15:30"),
                new FootballApi.GameEntry(2, new FootballApi.ScoreEntry() { HomeScore = 1, AwayScore = 2, HomeTeam = new FootballApi.Team(1, "FC Real Madrid"), AwayTeam = new FootballApi.Team(2, "yyy") }, DateTime.Now, "15:30"),
                new FootballApi.GameEntry(3, new FootballApi.ScoreEntry() { HomeScore = 1, AwayScore = 2, HomeTeam = new FootballApi.Team(1, "Spurs Tottenham"), AwayTeam = new FootballApi.Team(2, "yyy") }, DateTime.Now, "15:30"),
                new FootballApi.GameEntry(4, new FootballApi.ScoreEntry() { HomeScore = 1, AwayScore = 2, HomeTeam = new FootballApi.Team(1, "xxx"), AwayTeam = new FootballApi.Team(2, "yyy") }, DateTime.Now, "15:30"),
                new FootballApi.GameEntry(5, new FootballApi.ScoreEntry() { HomeScore = 1, AwayScore = 2, HomeTeam = new FootballApi.Team(1, "xxx"), AwayTeam = new FootballApi.Team(2, "yyy") }, DateTime.Now, "15:30"),
                new FootballApi.GameEntry(6, new FootballApi.ScoreEntry() { HomeScore = 1, AwayScore = 2, HomeTeam = new FootballApi.Team(1, "xxx"), AwayTeam = new FootballApi.Team(2, "yyy") }, DateTime.Now, "15:30"),
            });
        }
    }

    public void EnterSelectedTeamsAndQuotes(FootballApi.Team hometeam, FootballApi.Team awayteam, BetEntries entry, BetType type = BetType.None)
    {
        if (User is null)
        {
            NavigationManager.NavigateTo("/account/login");
        }
        SelectedTeams = new Tuple<Tuple<FootballApi.Team, FootballApi.Team>, BetEntries>(new Tuple<FootballApi.Team, FootballApi.Team>(hometeam, awayteam), entry);
        ChosenTeam = type;
        ShowModal();
        StateHasChanged();
    }

    public record struct BetEntries(double HomeWinPayOut, double DrawPayOut, double AwayWinPayOut);

    private Tuple<Tuple<FootballApi.Team, FootballApi.Team>, BetEntries> selectedTeams;

    public Tuple<Tuple<FootballApi.Team, FootballApi.Team>, BetEntries> SelectedTeams
    {
        get => selectedTeams;
        set
        {
            selectedTeams = value;
            StateHasChanged();
        }
    }

    public BetType chosenTeam;

    public BetType ChosenTeam
    {
        get => chosenTeam;
        set
        {
            chosenTeam = value;
            StateHasChanged();
        }
    }
    public void SetChosenTeam(BetType type) => ChosenTeam = type;
    
    public string BetAmount { get; set; }

    Task OnTextChanges(string value)
    {
        BetAmount = value;
        return Task.CompletedTask;
    }

    // MODAL
    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task PlaceBet()
    {
        int amount;
        try
        {
            amount = int.Parse(BetAmount);
        }
        catch (Exception e)
        {
            ModalErrorMessage = "Please enter a valid number!";
            return;
        }
        
        if (ChosenTeam == BetType.None)
        {
            ModalErrorMessage = "Please select a team to bet on";
            return;
        }

        if (amount < 1)
        {
            ModalErrorMessage = "Amount must be greater than 0";
            return;
        }

        if (User.Points < amount)
        {
            ModalErrorMessage = "You do not have enough credits!";
            return;
        } 

        ModalErrorMessage = null;
        HideModal();

        //TODO AddBet
    }
    
    private string ModalErrorMessage { get; set; }

    public enum BetType
    {
        None,
        HomeWin,
        Draw,
        AwayWin
    }


}