@namespace MPM_Betting.Blazor.ComponentLibrary.DesktopView
@using Blazorise
@using LanguageExt.ClassInstances.Const
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.ApiExplorer
@using Microsoft.EntityFrameworkCore
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel
@using MPM_Betting.DataModel.Betting
@using MPM_Betting.DataModel.Football
@using MPM_Betting.DataModel.User
@using MPM_Betting.Services.Data
@using MPM_Betting.Services.Domains
@using MudBlazor
@inject FootballApi Api
@inject NavigationManager NavigationManager
@* @inject IDbContextFactory<MpmDbContext> dbContextFactory *@
@inject UserDomain UserDomain

@attribute [StreamRendering]
@attribute [Authorize]
@rendermode InteractiveServer


@if (SelectedTeams != null && !expiredMatch)
{
    <Modal @ref="ModalRef" Class="ModalSettings">
        <ModalContent Centered>
            <ModalHeader Background="Background.Dark">
                <ModalTitle TextColor="TextColor.Default">Enter a new Bet</ModalTitle>
                <CloseButton TextColor="TextColor.White"/>
            </ModalHeader>
            <ModalBody Background="Background.Dark" Class="ModalSettings">
                <Field>
                    <h4 class="fw-bold">@SelectedTeams.Item1.Item1.Name.ToString() vs @SelectedTeams.Item1.Item2.Name.ToString()</h4>
                </Field>
                <Divider></Divider>
                <Field>
                    <div class="ModalTeamEntries ModalEntries" >
                        <span>Home Win</span>
                        <span>Draw</span>
                        <span>Away Win</span>
                    </div>
                    <div class="ModalBetEntries ModalEntries">
                        <span class="BetEntry @(ChosenTeam == BetType.HomeWin ? "ModalActiveBet" : "")" onclick="@(() => SetChosenTeam(BetType.HomeWin) )">x @SelectedTeams.Item2.HomeWinPayOut</span>
                        <span class="BetEntry @(ChosenTeam == BetType.Draw ? "ModalActiveBet" : "")" onclick="@(() => SetChosenTeam(BetType.Draw))">x @SelectedTeams.Item2.DrawPayOut</span>
                        <span class="BetEntry @(ChosenTeam == BetType.AwayWin ? "ModalActiveBet" : "")" onclick="@(() => SetChosenTeam(BetType.AwayWin))">x @SelectedTeams.Item2.AwayWinPayOut</span>
                    </div>
                </Field>
                <Field>
                    <FieldLabel>Score Predition</FieldLabel>
                    <div class="mb-5">Getting this right double your win!</div>
                    
                    <Validation UsePattern>
                        <div class="row ModalScoreEntryNames">
                            <div class="col-1"></div>
                            <div class="col-6">
                                <div>@SelectedTeams.Item1.Item1.Name</div>
                            </div>
                            <div class="col-4">
                                <div>@SelectedTeams.Item1.Item2.Name</div>
                            </div>
                            <div class="col-1"></div>
                        </div>
                        <div class="row ModalScoreEntry">
                            <div class="col-1"></div>
                            <div class="col-4">
                                <TextEdit Text="@scoreBets.HomeScore" TextChanged="@OnHomeScoreChanges" Pattern="^[1-9][0-9]*$" Placeholder="HomeTeam"></TextEdit>
                            </div>
                            <div class="col-2">
                                <div>:</div>
                            </div>
                            <div class="col-4">
                                <TextEdit Text="@scoreBets.AwayScore" TextChanged="@OnAwayScoreChanges" Pattern="^[1-9][0-9]*$" Placeholder="AwayTeam"></TextEdit>
                            </div>
                            <div class="col-1"></div>
                        </div>
                    </Validation>
                </Field>
                <Field>
                    <FieldLabel>Amount of credits to bet:</FieldLabel>
                    <Validation UsePattern>
                        <TextEdit Text="@BetAmount" TextChanged="@OnTextChanges" Pattern="^[1-9][0-9]*$" Placeholder="Enter Credits">
                            
                        </TextEdit>
                    </Validation>
                </Field>
                @if (ModalErrorMessage != null)
                {
                    <Divider/>
                <Field>
                    <div class="ModalError ErrorMessage">
                        <div>@ModalErrorMessage</div>
                    </div>
                </Field>
                }
            </ModalBody>
            <ModalFooter Background="Background.Dark">
                <Button Color="Blazorise.Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Blazorise.Color.Primary" Clicked="@PlaceBet">Place Bet</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else if (expiredMatch)
{
<Modal @ref="ModalRef" Class="ModalSettings">
    <ModalContent Centered>
        <ModalHeader Background="Background.Dark">
            <ModalTitle>Expired Bet</ModalTitle>
            <CloseButton TextColor="TextColor.Light"/>
        </ModalHeader>
        <ModalBody Background="Background.Dark" Class="ModalSettings">
            <Field>
                <FieldLabel>This Match has already expired and cannot be bet on!</FieldLabel>
            </Field>
        </ModalBody>
        <ModalFooter Background="Background.Dark">
            <Button Color="Blazorise.Color.Primary" Clicked="@HideModal">OK</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}
else
{
    <Modal @ref="ModalRef" Class="ModalSettings">
        <ModalContent Centered>
            <ModalHeader Background="Background.Dark">
                <ModalTitle>Error Loading</ModalTitle>
                <CloseButton/>
            </ModalHeader>
            <ModalBody Background="Background.Dark" Class="ModalSettings">
                <Field>
                    <FieldLabel>Either try again or refresh the page</FieldLabel>
                </Field>
            </ModalBody>
            <ModalFooter Background="Background.Dark">
                <Button Color="Blazorise.Color.Primary" Clicked="@HideModal">OK</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<div class="MatchesDate">
    <MatchesDatePicker MatchesPage="this"/>
</div>

<Divider/>

<div class="MatchesBox">
    <h2>Matches</h2>
    <Divider/>
    <div class="MatchLeagueBoxes">
        <div class="line"></div>
        <div class="mt-5 mb-5"></div>
        @if (!Loaded)
        {
            <div class="LoadingMatches">
                <div>Loading...</div>
            </div>
        }
        else
        {
            @if (GameEntries.Count == 0)
            {
                <div class="NoMatchesError">
                    <div>No Matches have been found on the given date</div>
                </div>
            }
            @foreach(var league in TopLeagues)
            {
                @if (GameEntries.ContainsKey(league.Id))
                {
                    <div class="MatchLeagueEntry">
                        <div class="MatchLeagueEntryName">@league.Name</div>
                        <div class="LeagueMatches">
                            @foreach (var match in GameEntries[league.Id])
                            {
                                <div class="MatchEntry">
                                    <div class="MatchInfo">
                                        <img class="Match_HomeLogo" src="https://images.fotmob.com/image_resources/logo/teamlogo/@(match.Score.HomeTeam.Id).png"/>
                                        <div class="MatchHomeTeam">@match.Score.HomeTeam.Name</div>
                                        <div class="MatchScore">
                                           @if (CheckIfMatchExpired(match))
                                           {
                                               <span>@match.Score.HomeScore</span>
                                               <span>:</span>
                                               <span>@match.Score.AwayScore</span>
                                           }
                                           else
                                           {
                                               <div>@match.StartTime.ToString("HH:mm")</div>
                                           }
                                            
                                        </div>
                                        <div class="MatchAwayTeam">@match.Score.AwayTeam.Name</div>
                                        <img class="Match_HomeLogo" src="https://images.fotmob.com/image_resources/logo/teamlogo/@(match.Score.AwayTeam.Id).png"/>
                                    </div>
                                    <div class="MatchInfoDivider"></div>
                                    <div class="BetsInfo">
                                        @foreach (var entry in GameBetEntries.Where(s => s.Item1 == match).Select(s => s.Item2))
                                        {
                                            <div class="col-4 ">
                                                <div>1</div>
                                                <span class="@(CheckIfMatchExpired(match) ? (match.Score.HomeScore > match.Score.AwayScore ? "rightBet": "wrongBet") : "NotStarted")" onclick="@(() => EnterSelectedTeamsAndQuotes(match, match.Score.HomeTeam, match.Score.AwayTeam, entry, BetType.HomeWin))">@entry.HomeWinPayOut</span>
                                            </div>
                                            <div class="col-4">
                                                <div>X</div>
                                                <span class="@(CheckIfMatchExpired(match) ? (match.Score.HomeScore == match.Score.AwayScore ? "rightBet": "wrongBet") : "NotStarted")" onclick="@(() => EnterSelectedTeamsAndQuotes(match, match.Score.HomeTeam, match.Score.AwayTeam, entry, BetType.Draw))">@entry.DrawPayOut</span>
                                            </div>
                                            <div class="col-4">
                                                <div>2</div>
                                                <span class="@(CheckIfMatchExpired(match) ? (match.Score.HomeScore < match.Score.AwayScore ? "rightBet": "wrongBet") : "NotStarted")"  onclick="@(() => EnterSelectedTeamsAndQuotes(match, match.Score.HomeTeam, match.Score.AwayTeam, entry, BetType.AwayWin))">@entry.AwayWinPayOut</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                    </div>
            </div>
                }
            }
        }
    </div>
</div>




 
@code {
    [Parameter] public List<FootballApi.League> Leagues { get; set; }
    [CascadingParameter] private SyncContextWithPayload<MpmUser>? UserTask { get; set; }
    MpmUser? User;
    MpmDbContext dbContext;

    private bool loaded;
    private bool expiredMatch;

    private bool ExpiredMatch
    {
        get => expiredMatch;
        set
        {
            expiredMatch = value;
            StateHasChanged();
        }
    }

    private bool Loaded
    {
        get => loaded;
        set
        {
            loaded = value;
            StateHasChanged();
        }
    }
    
    private ScoreBets scoreBets { get; set; }
    public List<FootballApi.League>? TopLeagues { get; set; }
    public List<FootballApi.League>? FavouriteLeagues { get; set; }

    public Dictionary<int, List<FootballApi.GameEntry>>? GameEntries { get; set; }
    public Dictionary<int, List<FootballApi.GameEntry>>? AllGameEntries { get; set; }
    public List<Tuple<FootballApi.GameEntry, BetEntries>> GameBetEntries { get; set; }
    private DateTime selectedDate;
    private FootballApi.GameEntry selectedMatch;

    public DateTime SelectedDate
    {
        get => selectedDate;
        set
        {
            selectedDate = value;
            StateHasChanged();
            if(AllGameEntries is not null)
                RefreshMatches();
        }
    }
    
    public FootballApi.GameEntry SelectedMatch
    {
        get => selectedMatch;
        set
        {
            selectedMatch = value;
            StateHasChanged();
        }
    }

    #region PopOver

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    #endregion

    #region Classes

    private class ScoreBets
    {
        public string HomeScore { get; set; }
        public string AwayScore { get; set; }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        scoreBets = new ScoreBets();
        int[] ids =  {47, 54, 87, 55, 53, 57, 61, 196, 48, 71};
        TopLeagues = Leagues.Where(s => ids.Contains(s.Id)).OrderBy(s => s.Id).ToList();
        ChosenTeam = BetType.None;
        if (UserTask is null)
            return;
        
        await UserTask.SyncEvent.Task;

        if (UserTask.Payload is not null)
        {
            User = UserTask.Payload;
            UserDomain.SetUser(User);
            var ints = UserDomain.GetFavouriteLeaguesForUser();
            FavouriteLeagues = Leagues.Where(s => ints.Contains(s.Id)).ToList();
            TopLeagues = TopLeagues.Union(FavouriteLeagues).ToList();
            TopLeagues = TopLeagues.OrderByDescending(s => FavouriteLeagues.Contains(s)).ToList();
        }
        
        await RequestFillMatches();
    }

    private async Task RequestFillMatches()
    {
        AllGameEntries = new Dictionary<int, List<FootballApi.GameEntry>>();
        foreach (var league in TopLeagues)
        {
            var result = await Api.GetGameEntries(league.Id, null);

            if (result.IsSuccess)
            {
                AllGameEntries.Add(league.Id, result.Value);
            }
               
        }
        RefreshMatches();
        Loaded = true;
    }

    private void RefreshMatches()
    {
        GameEntries = new Dictionary<int, List<FootballApi.GameEntry>>();
        foreach (var league in AllGameEntries)
        {
            GameEntries.Add(league.Key, league.Value.Where(s => DateOnly.FromDateTime(s.StartTime) == DateOnly.FromDateTime(SelectedDate)).ToList());
        }

        GameBetEntries = new List<Tuple<FootballApi.GameEntry, BetEntries>>();
        foreach (var league in GameEntries)
        {
            foreach (var game in league.Value)
            {
                GameBetEntries.Add(new Tuple<FootballApi.GameEntry, BetEntries>(game, new BetEntries(GetRandomQuote(), GetRandomQuote(), GetRandomQuote())));
            }
        }
        RemoveEmptyLeagues();
    }

    private void RemoveEmptyLeagues()
    {
        foreach (var entry in GameEntries)
        {
            if(entry.Value.Count == 0)
                GameEntries.Remove(entry.Key);
        }
    }
    

    public double GetRandomQuote() => System.Math.Round(new Random().NextDouble() + new Random().Next(1, 4), 2);
    
    private bool CheckIfMatchExpired(FootballApi.GameEntry entry) => entry.StartTime.CompareTo(DateTime.Now) != 1;

    public async Task EnterSelectedTeamsAndQuotes(FootballApi.GameEntry match, FootballApi.Team hometeam, FootballApi.Team awayteam, BetEntries entry, BetType type = BetType.None)
    {
        if (User is null)
        {
            NavigationManager.NavigateTo("/account/login");
        }

        // if (CheckIfMatchExpired(match)) //TODO remember to enabled this later
        // {
        //     ExpiredMatch = true;
        //     await ShowModal();
        //     await ShowModal();
        //     return;
        // }
        
        SelectedTeams = new Tuple<Tuple<FootballApi.Team, FootballApi.Team>, BetEntries>(new Tuple<FootballApi.Team, FootballApi.Team>(hometeam, awayteam), entry);
        SelectedMatch = match;
        ChosenTeam = type;
        
        await ShowModal();
        await ShowModal();
    }

    public record struct BetEntries(double HomeWinPayOut, double DrawPayOut, double AwayWinPayOut);

    private Tuple<Tuple<FootballApi.Team, FootballApi.Team>, BetEntries> selectedTeams;

    public Tuple<Tuple<FootballApi.Team, FootballApi.Team>, BetEntries> SelectedTeams
    {
        get => selectedTeams;
        set
        {
            selectedTeams = value;
            StateHasChanged();
        }
    }

    public BetType chosenTeam;

    public BetType ChosenTeam
    {
        get => chosenTeam;
        set
        {
            chosenTeam = value;
            StateHasChanged();
        }
    }
    public void SetChosenTeam(BetType type) => ChosenTeam = type;
    
    public string BetAmount { get; set; }

    Task OnTextChanges(string value)
    {
        BetAmount = value;
        return Task.CompletedTask;
    }
    
    Task OnHomeScoreChanges(string value)
    {
        scoreBets.HomeScore = value;
        return Task.CompletedTask;
    }
    
    Task OnAwayScoreChanges(string value)
    {
        scoreBets.AwayScore = value;
        return Task.CompletedTask;
    }

    // MODAL
    private Modal modalRef;

    private Modal ModalRef
    {
        get => modalRef;
        set
        {
            modalRef = value;
            StateHasChanged();
        }
    }

    private Task ShowModal()
    {
        scoreBets = new ScoreBets();
        ModalErrorMessage = "";
        return ModalRef.Show();
    }

    private Task HideModal()
    {
        // ExpiredMatch = ExpiredMatch ? false : ExpiredMatch; this is an atrifact, leave it here c:
        ExpiredMatch = false;
        return modalRef.Hide();
    }

    private async Task PlaceBet()
    {
        int amount;
        int homeScore, awayScore;
        try
        {
            amount = int.Parse(BetAmount);
            homeScore = int.Parse(scoreBets.HomeScore);
            awayScore = int.Parse(scoreBets.AwayScore);
        }
        catch (Exception e)
        {
            ModalErrorMessage = "Please enter valid numbers!";
            return;
        }
        
        if (ChosenTeam == BetType.None)
        {
            ModalErrorMessage = "Please select a team to bet on";
            return;
        }

        if (amount < 1)
        {
            ModalErrorMessage = "Amount must be greater than 0";
            return;
        }

        if (User.Points < amount)
        {
            ModalErrorMessage = "You do not have enough credits!";
            return;
        }
        
        if(homeScore < 0 || awayScore < 0)
        {
            ModalErrorMessage = "Please enter valid scores!";
            return;
        }
        
        switch(chosenTeam)
        {
            case BetType.HomeWin:
                if(homeScore < awayScore)
                {
                    ModalErrorMessage = "Your scores do not match with the selected team!";
                    return;
                }
                break;
            case BetType.Draw:
                if(homeScore != awayScore)
                {
                    ModalErrorMessage = "Your scores do not match with the selected team!";
                    return;
                }
                break;
            case BetType.AwayWin:
                if(homeScore > awayScore)
                {
                    ModalErrorMessage = "Your scores do not match with the selected team!";
                    return;
                }
                break;
        }

        double quote;
        switch (chosenTeam)
        {
            case BetType.HomeWin:
                quote = SelectedTeams.Item2.HomeWinPayOut;
                break;
            case BetType.Draw:
                quote = SelectedTeams.Item2.DrawPayOut;
                break;
            case BetType.AwayWin:
                quote = SelectedTeams.Item2.AwayWinPayOut;
                break;
            default:
                quote = 1;
                break;
        }


        var result = await UserDomain.PlaceGameBet(quote, homeScore, awayScore, SelectedMatch.Id, int.Parse(BetAmount));

        if (result.IsFaulted)
        {
            if (result.Exception is UserDomain.AlreadyExistsException)
                ModalErrorMessage = "You have already Bet on this Match!";
            else if (result.Exception is UserDomain.InvalidBetParameter)
                ModalErrorMessage = "Invalid bet parameters!";
            else
                ModalErrorMessage = $"Some error: {result.Exception.Message}";
            return;
        }

        //TODO AddBet
        SelectedTeams = null;
        SelectedMatch = default;
        ModalErrorMessage = "";
        NavigationManager.Refresh();
        await HideModal();
    }
    
    private string ModalErrorMessage { get; set; }

    public enum BetType
    {
        None,
        HomeWin,
        Draw,
        AwayWin
    }


}