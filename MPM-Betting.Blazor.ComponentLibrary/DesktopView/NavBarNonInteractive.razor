@using Blazorise.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel.Betting
@using MPM_Betting.DataModel.User
@using Microsoft.AspNetCore.Components.Forms
@using Blazorise.Icons.FontAwesome
@using Microsoft.AspNetCore.Http
@namespace MPM_Betting.Blazor.ComponentLibrary.DesktopView


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="NavBar flex flex-row justify-between align-center">
    <div class="nav-left flex flex-row h-full align-center">
        <div class="logo">
            <a href="/" class="NoHoverUnderline">
                <span class="NavBarLogoText">MPM</span>
            </a>
        </div>

        <ul class="nav-list">
            <li>
                <a href="/dashboard" class="NoHoverUnderline nav-link @(NavigationManager.Uri.Contains("dashboard") ? "nav-active" : "")">
                    Dashboard
                </a>
            </li>
            <li>
                <a href="/groups" class="NoHoverUnderline nav-link @(NavigationManager.Uri.Contains("groups") ? "nav-active" : "")">
                    Groups
                </a>
            </li>
        </ul>
    </div>


@*     <div class="nav-right flex flex-row mr-4"> *@
@*         @if (m_User is null) *@
@*         { *@
@*             <div> *@
@*                 <Button Color="Color.Primary" Clicked="@(() => NavigationManager.NavigateTo(LoginUrl))">Login</Button> *@
@*                 <Button Color="Color.Primary" Clicked="@(() => NavigationManager.NavigateTo(RegisterUrl))">Register</Button> *@
@*             </div> *@
@*         } *@
@*         else *@
@*         { *@
@*             <div class="NavBarPoints"> *@
@*                 @{ *@
@*                     var x = ConvertToLog10(m_User.Points); *@
@*                     <div>@x</div> *@
@*                 } *@
@*                 <img src="./Images/Logo_cropped.png" height="50px"/> *@
@*             </div> *@
@*             <Dropdown> *@
@*                 <DropdownToggle Color="Color.Light" Background="Background.Secondary"> *@
@*                     <img src="@m_ImageUrl" alt="Profile Picture" class="profile-picture"/> *@
@*                 </DropdownToggle> *@
@*                 <DropdownMenu Background="Background.Secondary" TextColor="TextColor.Light"> *@
@*                     <DropdownItem><a href="/bets/history" class="NoHoverUnderline">Bet History</a></DropdownItem> *@
@*                     <DropdownItem><a href="/groups" class="NoHoverUnderline">Groups</a></DropdownItem> *@
@*                     <DropdownItem><a href="/inventory" class="NoHoverUnderline">Inventory</a></DropdownItem> *@
@*                     <DropdownDivider/> *@
@*                     <DropdownItem><a href="/profile" class="NoHoverUnderline">Profile</a></DropdownItem> *@
@*                     <DropdownItem><a href="/account/manage/profile" class="NoHoverUnderline">Manage</a></DropdownItem> *@
@*                     <DropdownItem> *@
@*                         <form action="Account/Logout" method="post"> *@
@*                             <AntiforgeryToken/> *@
@*                             <input type="hidden" name="ReturnUrl" value=""/> *@
@*                             <button type="submit"> *@
@*                                 <a class="NoHoverUnderline" aria-hidden="true">Logout</a>  *@
@*                             </button> *@
@*                         </form> *@
@*                     </DropdownItem> *@
@*                 </DropdownMenu> *@
@*             </Dropdown> *@
@*         } *@
@*     </div> *@
</div>

@code {
     public MpmUser? m_User { get; set; }

    private string m_ImageUrl = "./Images/default-profile-picture.png";

    const string LoginUrl = "/account/login";
    const string RegisterUrl = "/account/register";

    protected override async Task OnInitializedAsync()
    {
        if (m_User is not null)
        {
            m_ImageUrl = m_User.ProfilePictureUrl.IsNullOrEmpty() ? m_ImageUrl : m_User?.ProfilePictureUrl!;
        }
    }

    private string ConvertToLog10(int number)
    {
        if (number == 0)
            return "0";
        int mag = (int)(Math.Floor(Math.Log10(number)) / 3);
        double divisor = Math.Pow(10, mag * 3);

        double shortNumber = number / divisor;

        string suffix;
        switch (mag)
        {
            case 0:
                suffix = string.Empty;
                break;
            case 1:
                suffix = "k";
                break;
            case 2:
                suffix = "m";
                break;
            case 3:
                suffix = "b";
                break;
            case 4:
                suffix = "t";
                break;
            default:
                suffix = "a fuck ton";
                break;

        }

        return shortNumber.ToString("N1") + ' ' + suffix;
    }

}
