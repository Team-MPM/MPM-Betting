@page "/Groups/{GroupId:int}"
@using Microsoft.AspNetCore.Authorization
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel.User
@using MPM_Betting.Services
@using MPM_Betting.Services.Domains
@using Color = Blazorise.Color
@using Margin = Blazorise.Margin
@using Size = MudBlazor.Size
@using Blazorise
@using MPM_Betting.DataModel.Betting
@using Width = Blazorise.Width

@attribute [Authorize]

@inject UserDomain UserDomain
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider

<div class="group-view">
    @if (m_Model.Group is not null && m_Model.Entry is not null)
    {
        <div class="side-nav">
            <Dropdown Class="m-0">
                <DropdownToggle Class="m-0 p-0" TextColor="TextColor.Light">
                    <div class="group-title flex flex-row">
                        <img src="@(m_Model.Group.ProfilePictureUrl ?? "images/coin.png")"
                             class="ml-3 mt-3 mb-2 mr-2" alt="group logo"/>
                        <div class="mt-3 mx-2">@m_Model.Group.Name</div>
                        <i class="m-2 my-3">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown"></MudIcon>
                        </i>
                    </div>
                </DropdownToggle>
                <DropdownMenu Class="bg-dark mt-2" Margin="Margin.Is2.FromStart" Width="Width.Px(235)">
                    <DropdownItem TextColor="TextColor.Light">
                        <div class="flex flex-row align-content-space-between">
                            <div>Users</div>
                            <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.SupervisedUserCircle" Size="Size.Small"></MudIcon>
                        </div>
                    </DropdownItem>
                    <DropdownItem TextColor="TextColor.Light">
                        <div class="flex flex-row align-content-space-between">
                            <div>Insights</div>
                            <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.Insights" Size="Size.Small"></MudIcon>
                        </div>
                    </DropdownItem>
                    @if (m_Model.Entry.Role is EGroupRole.Admin or EGroupRole.Owner)
                    {
                        <DropdownItem TextColor="TextColor.Light">
                            <div class="flex flex-row align-content-space-between">
                                <div>Settings</div>
                                <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.Settings" Size="Size.Small"></MudIcon>
                            </div>
                        </DropdownItem>
                    }
                    <DropdownDivider/>
                    @if (m_Model.Entry.Role is EGroupRole.Admin or EGroupRole.Owner)
                    {
                        <DropdownItem TextColor="TextColor.Light" Clicked="ShowNewSeasonModal">
                            <div class="flex flex-row align-content-space-between">
                                <div>Add Season</div>
                                <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.Add" Size="Size.Small"></MudIcon>
                            </div>
                        </DropdownItem>
                        <DropdownDivider/>
                    }
                    <DropdownItem TextColor="TextColor.Danger">
                        <div class="flex flex-row align-content-space-between">
                            <div>Report Group</div>
                            <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.Report" Size="Size.Small"></MudIcon>
                        </div>
                    </DropdownItem>
                    <DropdownItem TextColor="TextColor.Danger">
                        <div class="flex flex-row align-content-space-between">
                            <div>Leave Group</div>
                            <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.ExitToApp" Size="Size.Small"></MudIcon>
                        </div>
                    </DropdownItem>
                    @if (m_Model.Entry.Role is EGroupRole.Admin or EGroupRole.Owner)
                    {
                        <DropdownItem TextColor="TextColor.Danger">
                            <div class="flex flex-row align-content-space-between">
                                <div>Delete Group</div>
                                <MudIcon Class="ml-auto" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudIcon>
                            </div>
                        </DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>


            <div class="list m-2">

                <MudDivider Class="mb-3"/>

                <div class="flex flex-row py-1 px-2">
                    <MudIcon Class="mr-auto" Icon="@Icons.Material.Outlined.BarChart" Size="Size.Small"></MudIcon>
                    <div>Overview</div>
                </div>
                <div class="flex flex-row py-1 px-2">
                    <MudIcon Class="mr-auto" Icon="@Icons.Material.Outlined.Score" Size="Size.Small"></MudIcon>
                    <div>Ranking</div>
                </div>
                <div class="flex flex-row py-1 px-2">
                    <MudIcon Class="mr-auto" Icon="@Icons.Material.Outlined.Chat" Size="Size.Small"></MudIcon>
                    <div>Chat</div>
                </div>

                @if (m_Model.ActiveSeasons is not null && m_Model.ActiveSeasons.Count > 0)
                {
                    @foreach (var sport in m_Model.ActiveSeasons)
                    {
                        <MudDivider Class="my-3"/>

                        <div class="flex flex-row align-content-center justify-center py-1 px-2 mb-2">
                            <MudIcon Icon="@Icons.Material.Outlined.SportsSoccer" Size="Size.Small"/>
                            <div class="font-monospace font-weight-semibold">@sport.Key</div>
                        </div>

                        @foreach (var season in sport.Value)
                        {
                            <div class="flex flex-row align-content-space-between py-1 px-2">
                                <div>@season.Name</div>
                                <MudIcon Class="ml-auto" Icon="@Icons.Material.Outlined.Star" Size="Size.Small"></MudIcon>
                            </div>
                        }
                    }
                }


                <MudDivider Class="my-3"/>
            </div>

            <div>

            </div>
        </div>
    }
    else
    {
        <p>Failed to load group id:@GroupId</p>
        <p>@m_GroupResult.Exception</p>
        <p>@m_GroupResult.Exception.Message</p>
    }
</div>

<Blazorise.Modal @bind-Visible="m_NewSeasonModalVisible">
    <ModalContent Centered>
        <ModalHeader Background="Background.Dark">
            <ModalTitle>Add new Season</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody Background="Background.Dark">
            <Text>@m_NewSeasonModalStatus</Text>
            <Tabs SelectedTab="@m_NewSeasonTab" SelectedTabChanged="@OnNewSeasonSelectedTabChanged">
                <Items>
                    <Tab Name="Builtin">Builtin</Tab>
                    <Tab Name="Custom">Custom</Tab>
                </Items>
                <Content>
                    <TabPanel Name="Builtin">
                        <Field>
                            <Select TValue="int" Class="mt-4" @bind-SelectedValue="@m_NewSeasonSelectedSeasonId">
                                @foreach (var season in m_Model.BuiltinSeasons?.GroupBy(s => s.Name)
                                              .Select(g => g.MaxBy(s => s.Start))
                                              .OrderBy(s => s!.Name)
                                              .ToList() ?? [])
                                {
                                    <SelectItem Value="@season!.Id">@season!.Sport: @season!.Name</SelectItem>
                                }
                            </Select>
                        </Field>
                    </TabPanel>
                    <TabPanel Name="Custom">
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <TextEdit @bind-Text="m_NewSeasonName" Placeholder="Enter name..."/>
                        </Field>
                        <Field>
                            <FieldLabel>Description</FieldLabel>
                            <TextEdit @bind-Text="m_NewSeasonDescription" Placeholder="Enter description..."/>
                        </Field>
                        <Field>
                            <FieldLabel>Sport</FieldLabel>
                            <Select TValue="ESportType" @bind-SelectedValue="@m_NewSeasonSelectedSportType">
                                @foreach (var sport in Enum.GetValues<ESportType>())
                                {
                                    <SelectItem Value="@sport">@sport</SelectItem>
                                }
                            </Select>
                        </Field>
                        <Field>
                            <FieldLabel>Start Date</FieldLabel>
                            <DateEdit @bind-Date="m_NewSeasonStartDate"/>
                        </Field>
                        <Field>
                            <FieldLabel>End Date</FieldLabel>
                            <DateEdit @bind-Date="m_NewSeasonEndDate"/>
                        </Field>
                    </TabPanel>
                </Content>
            </Tabs>

        </ModalBody>
        <ModalFooter Background="Background.Dark">
            <Button Color="Color.Secondary" Clicked="@HideNewSeasonModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@(async () => await CreateSeason())">Create</Button>
        </ModalFooter>
    </ModalContent>
</Blazorise.Modal>

@code {
    [Parameter] public int GroupId { get; set; } = default!;

    [CascadingParameter] private SyncContextWithPayload<MpmUser>? User { get; set; }
    MpmUser? m_UserInstance;

    MpmResult<(MpmGroup group, UserGroupEntry entry)> m_GroupResult;

    private bool m_ShowTitleDropdown = false;

    private Model m_Model;

    private bool m_NewSeasonModalVisible;
    private string m_NewSeasonModalStatus = "";

    private string m_NewSeasonName = "";
    private string m_NewSeasonDescription = "";
    private DateTime m_NewSeasonStartDate = DateTime.Today;
    private DateTime m_NewSeasonEndDate = DateTime.Today;
    private string m_NewSeasonTab = "Builtin";
    private int m_NewSeasonSelectedSeasonId = -1;
    private ESportType m_NewSeasonSelectedSportType = ESportType.None;
    
    private struct Model
    {
        public MpmGroup? Group { get; set; }
        public UserGroupEntry? Entry { get; set; }
        public Dictionary<ESportType, List<Season>>? ActiveSeasons { get; set; }
        public List<SeasonEntry>? SeasonEntries { get; set; }
        public List<BuiltinSeason>? BuiltinSeasons { get; set; }
        public MpmUser? User { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (User is null) return;
        await User.SyncEvent.Task;
        if (User.Payload is not null)
            m_UserInstance = User.Payload;

        if (m_UserInstance is null)
        {
            NavigationManager.NavigateTo("/account/login");
            return;
        }

        UserDomain.SetUser(m_UserInstance);

        m_Model = new Model()
        {
            User = User.Payload,
            ActiveSeasons = null,
            Entry = null,
            Group = null,
            BuiltinSeasons = await UserDomain.GetAllBuiltinSeasons(),
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (m_UserInstance is null) return;

        using var scope = ServiceProvider.CreateScope();
        var userDomain = scope.ServiceProvider.GetRequiredService<UserDomain>();
        userDomain.SetUser(m_UserInstance);

        m_GroupResult = await userDomain.GetGroupByIdWithAccess(GroupId);
        if (m_GroupResult.IsFaulted) NavigationManager.NavigateTo("/error");

        m_Model.Group = m_GroupResult.Value.group;
        m_Model.Entry = m_GroupResult.Value.entry;

        var seasonsResult = await userDomain.GetGroupSeasons(m_Model.Group);
        if (seasonsResult.IsFaulted) NavigationManager.NavigateTo("/error");

        m_Model.SeasonEntries = seasonsResult.Value;
        m_Model.ActiveSeasons = m_Model.SeasonEntries
            .Where(se => se.IsActive)
            .Select(se => se.Season)
            .GroupBy(s => s.Sport)
            .ToDictionary(g => g.Key, g => g.ToList());
        
        StateHasChanged();
    }

    private void ShowNewSeasonModal()
    {
        m_NewSeasonModalVisible = true;
    }

    private void HideNewSeasonModal()
    {
        m_NewSeasonModalVisible = false;
    }

    private async Task CreateSeason()
    {
        if (m_NewSeasonTab is "Builtin")
        {
            if (m_NewSeasonSelectedSeasonId is -1)
            {
                Console.WriteLine("hi");
                m_NewSeasonModalStatus = "Please select a season";
                return;
            }

            var result = await UserDomain.AddSeasonToGroup(m_Model.Group!, m_NewSeasonSelectedSeasonId);
            if (result.IsFaulted)
            {
                m_NewSeasonModalStatus = "An error occurred";
                return;
            }
        }
        else
        {
            if (string.IsNullOrWhiteSpace(m_NewSeasonName))
            {
                m_NewSeasonModalStatus = "Please enter a name";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(m_NewSeasonDescription))
            {
                m_NewSeasonModalStatus = "Please enter a description";
                return;
            }
            
            if (m_NewSeasonSelectedSportType is ESportType.None)
            {
                m_NewSeasonModalStatus = "Please select a sport";
                return;
            }

            var result = await UserDomain.CreateCustomSeason(
                m_Model.Group!, 
                m_NewSeasonName, 
                m_NewSeasonDescription,
                m_NewSeasonStartDate,
                m_NewSeasonEndDate,
                m_NewSeasonSelectedSportType);
            
            switch (result.IsFaulted)
            {
                case true when result.Exception is UserDomain.InvalidDateException:
                    m_NewSeasonModalStatus = "Invalid date range";
                    return;
                case true:
                    m_NewSeasonModalStatus = "An error occurred";
                    return;
            }
        }
        
        await OnParametersSetAsync();
        
        m_NewSeasonModalVisible = false;
        m_NewSeasonName = "";
        m_NewSeasonDescription = "";
        m_NewSeasonModalStatus = "";
        m_NewSeasonSelectedSeasonId = -1;
        m_NewSeasonStartDate = DateTime.Today;
        m_NewSeasonEndDate = DateTime.Today;
        m_NewSeasonSelectedSportType = ESportType.None;
        
    }

    private Task OnNewSeasonSelectedTabChanged(string name)
    {
        m_NewSeasonTab = name;
        return Task.CompletedTask;
    }
}