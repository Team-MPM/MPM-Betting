@page "/BetHistory"
@using Blazorise.Extensions
@using Microsoft.AspNetCore.Authorization
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using MPM_Betting.DataModel.User
@attribute [Authorize]
@using System.Net.Http.Json
@using System.Text.RegularExpressions
@using MPM_Betting.DataModel.Betting
@using MPM_Betting.Services
@using MPM_Betting.Services.Data
@using MPM_Betting.Services.Domains
@inject HttpClient httpClient
@inject UserDomain userDomain
@inject FootballApi footballApi

<h3>BetHistory</h3>
<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
    <thead>
    <tr>
        @foreach (var h in headings)
        {
        <th>@h</th>
        }
    </tr>
    </thead>
    <tbody>
    @for (int i = 0; i < bets.Count; i++)
    {
    <tr>
        <td>@i</td>
        <td>@HomeTeam vs @AwayTeam</td>
        @if (bets[i].Hit == true)
        {
        <td>Hit</td>
        }
        else
        {
        <td>Miss</td>
        }
        <td>@bets[i].Game.StartTime</td>
    </tr>
    }
    </tbody>
</MudSimpleTable>


@code {
    [CascadingParameter] private SyncContextWithPayload<MpmUser> User { get; set; } = default!;
    MpmUser? m_UserInstance;
    private List<Bet> bets;
    private MpmResult<List<Bet>> betsResult;
    string exceptionMessage = "";
    string AwayTeam;
    string HomeTeam;
    
   
    
    private bool dense = false;
    private bool hover = true;     
    private bool striped = false;
    private bool bordered = false;
    
    string[] headings = { "#","Match", "Outcome", "StartTime"};
    
    
    
    protected override async Task OnInitializedAsync()
    {
        
        //table 
        
        
        await User.SyncEvent.Task;
        if (User.Payload is not null)
        {
            m_UserInstance = User.Payload;
        }
        else
        {
            return;
        }
        bets = new List<Bet>();
        userDomain.SetUser(m_UserInstance);
        List<SeasonEntry> seasonEntries = new List<SeasonEntry>();

        Season ts = new Season("Testseason", "...");
        MpmGroup tg = new MpmGroup(m_UserInstance, "testgroup_bethistory", "...", seasonEntries);
        
        
        for (int i = 0; i < 10; i++)
        {
            Bet bet = new Bet();
            bet.UserId = m_UserInstance.Id;
            bet.Game = new Game($"Testgame {i}",76);
            bet.Hit = false;
            
            seasonEntries.Add(new SeasonEntry
            {
                GroupId = 1,
                Group = tg,
                SeasonId = 1,
                Season = ts
                
            });
            
            bet.Completed = true;
            bet.Group = new MpmGroup(m_UserInstance, "testgroup_bethistory", "...", seasonEntries);
            bet.GroupId = 1;
            
            MpmResult<FootballApi.GameDetails> gd = await footballApi.GetGameDetails(4193451);
        
             AwayTeam = gd.Value.GameEntry.Score.AwayTeam.Name;
             HomeTeam = gd.Value.GameEntry.Score.HomeTeam.Name;
            
            bets.Add(bet);
            
        }
        
        betsResult = await userDomain.GetAllCompletedBets();
        
        foreach (var bet in betsResult.Value)
        {
            bets.Add(bet);
        }
        
        
       
        
        //bets = await userDomain.GetAllCompletedBets();
        
    }
}