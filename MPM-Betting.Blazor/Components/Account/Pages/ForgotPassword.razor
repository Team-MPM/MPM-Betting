@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MPM_Betting.DataModel.User

@inject UserManager<MpmUser> UserManager
@inject IEmailSender<MpmUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<header>
    <div class="AdministrationMiddleBox">
        <div class="StatusBox">

        </div>
        <h1>Forgot your password?</h1>
        <div class="AdministrationBox">
            <div class="BoxContent soft-bg">
                <div>Enter your email to get a link to reset your password</div>
                <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    @* <ValidationSummary class="text-danger" role="alert"/> *@

                    <div class="form-floating mb-3">
                        <div>Email</div>
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        @* <label for="email" class="form-label">Email</label> *@
                        <ValidationMessage For="() => Input.Email" class="text-danger"/>
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset password</button>
                </EditForm>
                <div>Click the button below to go back to the Login Page</div>
                <a href="/account/login">Back to Login</a>
            </div>
        </div>
    </div>
</header>


@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }

}