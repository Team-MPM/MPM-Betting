@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MPM_Betting.DataModel.User

@inject UserManager<MpmUser> UserManager
@inject IEmailSender<MpmUser> EmailSender
@inject NavigationManager NavigationManager

<PageTitle>Resend email confirmation</PageTitle>

<header>
    <div class="AdministrationMiddleBox">
        <div class="StatusBox">
            
        </div>
        <h1>Resend email confirmation</h1>
        <div class="AdministrationBox">
            <div class="BoxContent soft-bg">
                <div>Enter you email to which the confirmation will be sent.</div>
                <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    @* <ValidationSummary class="text-danger" role="alert"/> *@
                    <div class="form-floating mb-3 formBox">
                        <div>Email</div>
                        @* <label for="email" class="form-label ColorWhite">Email</label> *@
                        <InputText @bind-Value="Input.Email" class="form-control emailInput DarkBackground ColorWhite" aria-required="true" placeholder="name@example.com"/>

                        <ValidationMessage For="() => Input.Email" class="text-danger"/>
                    </div>
                    <div class="SubmitBox">
                        <button type="submit" class="mb-5 w-50 btn btn-lg btn-primary submitButton">Resend</button>
                    </div>
                    <StatusMessage Message="@m_Message"/>
                </EditForm>
                <div>Click the button below to go back to the Login Page</div>
                <a href="/account/login">Back to Login</a>
            </div>
        </div>
    </div>
</header>

@code {
    private string? m_Message;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            m_Message = "Verification email sent. Please check your email.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        m_Message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }

}