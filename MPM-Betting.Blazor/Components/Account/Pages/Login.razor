@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MPM_Betting.DataModel.User

@inject SignInManager<MpmUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<div class="min-vh-100 d-flex align-items-center justify-content-center">
    <div class="container p-5 px-8 mx-24">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center mb-5">
                <h1 class="heading-section">Login</h1>
            </div>
        </div>

        <div class="row justify-content-center align-center">
            <div class="col-md-6 col-lg-4 pt-4 soft-bg">
                <div class="login-wrap p-0">
                    <h3 class="mb-4 text-center">Have an account?</h3>
                    <EditForm action="Account/Login" class="signin-form" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <StatusMessage Message="@m_ErrorMessage"/>
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="E-Mail"/>
                            <ValidationMessage For="() => Input.Email" class="ErrorFont"/>
                        </div>
                        <div class="form-group">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                            <ValidationMessage For="() => Input.Password" class="ErrorFont"/>
                        </div>
                        <div class="form-group d-md-flex">
                            <button class="form-control btn btn-primary submit px-3" type="submit">Log in</button>
                        </div>
                        <div class="form-group">
                            <div class="form-group d-md-flex">
                                <div class="w-50">
                                    <label class="checkbox-wrap checkbox-primary">
                                        Remember Me
                                        <InputCheckbox @bind-Value="Input.RememberMe">
                                            <span class="checkmark"></span>
                                        </InputCheckbox>
                                    </label>
                                </div>
                                <div class="w-50 text-md-right">
                                    <a href="Account/ForgotPassword">Forgot your password?</a>
                                </div>
                            </div>
                        </div>

                    </EditForm>

                    <hr/>

                    <div class="form-group">
                        <div class="form-group text-center">
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                Register as a new user
                            </a>
                        </div>
                        <div class="text-center">
                            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                        </div>
                    </div>

                    <div class="form-group">
                        <section>
                            <hr/>
                            <h3 class="text-center">Or Sign In With</h3>
                            <hr/>
                            <div class="flex justify-content-center">
                                <ExternalLoginPicker/>
                            </div>
                        </section>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>


@code {
    private string? m_ErrorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            m_ErrorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}