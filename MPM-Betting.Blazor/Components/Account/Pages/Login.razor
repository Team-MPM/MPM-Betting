@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MPM_Betting.DataModel.User

@inject SignInManager<MpmUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IDisposable

<PageTitle>Login</PageTitle>


<div class="LoginPageContainer">
    <div class="LoginTitle">Login</div>
    <div class="LoginData">
        <EditForm class="LoginDataBox" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>
            <div class="Username">
                <label for="email" class="form-label">E-Mail</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <ValidationMessage For="() => Input.Email" class="ErrorFont"/>
            </div>
            <div class="Password">
                <div class="PasswordLabelBox">
                    <label for="password" class="form-label">Password</label>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </div>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                <ValidationMessage For="() => Input.Password" class="ErrorFont"/>
            </div>
            <div class="SubmitButton">
                <button class="SubmitButton" type="submit">Log in</button>
            </div>
            <div class="Error">
                <ValidationSummary class="text-danger" role="alert"/>
            </div>
            <div class="OtherLoginOptions">
                <div>
                    <div>Don't have an account?</div>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Register as a new user
                    </a>
                </div>
                <div>
                    <div>Didn't get the email?</div>
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </div>
            </div>
        </EditForm>
        <div class="ExternalLogin">
            <section>
                <h3>Use another service to log in.</h3>
                <hr/>
                <ExternalLoginPicker/>
            </section>
        </div>
    </div>
</div>


@code {
    private string? m_ErrorMessage;
    private string? m_CurrentUrl;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        m_CurrentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        m_CurrentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            m_ErrorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}