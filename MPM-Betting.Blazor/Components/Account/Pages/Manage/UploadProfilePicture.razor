@page "/Account/Manage/upload-profile-picture"
@layout MainLayout
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using MPM_Betting.DataModel.User
@using Microsoft.AspNetCore.Components.Authorization
@using MPM_Betting.Blazor.ComponentLibrary.Core
@using Microsoft.AspNetCore.Authorization
@using MPM_Betting.Blazor.Components.Layout
@using System.IO

@inject UserManager<MpmUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-3"></div>
        <div class="col-6 UploadProfilePicContainer">
            <h2 class="white-text">Upload a new Profile Picture</h2>
            <MudDivider/>

            <InputFile OnChange="HandleSelected" />
            @if (!string.IsNullOrEmpty(m_Message))
            {
            <div class="PfpMessage">@m_Message</div>
            }
            <button class="SubmitNewPfp" @onclick="UploadFile">Upload</button>
            
        </div>
    </div>
</div>








@code {
    private string? m_Message;
    private IBrowserFile? m_SelectedFile;
    private MpmUser? User { get; set; }
    [CascadingParameter] private SyncContextWithPayload<MpmUser>? UserTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserTask is null) return;
        await UserTask.SyncEvent.Task;
        if (UserTask.Payload is not null)
            User = UserTask.Payload;
    }

    private void HandleSelected(InputFileChangeEventArgs e)
    {
        m_SelectedFile = e.File;
        m_Message = $"You selected {m_SelectedFile.Name}";
    }

    private async Task UploadFile()
    {
        if (User is null) NavigationManager.NavigateTo("/Account/Login", true);
        
        if (m_SelectedFile != null)
        {
            var uniqueFileName = Path.GetRandomFileName() + Path.GetExtension(m_SelectedFile.Name);
            var filePath = Path.Combine("wwwroot", "uploads", uniqueFileName);

            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await m_SelectedFile.OpenReadStream().CopyToAsync(fileStream);

            User!.ProfilePictureUrl = $"/uploads/{uniqueFileName}";
            var result = await UserManager.UpdateAsync(User);

            m_Message = result.Succeeded ? "Profile picture updated successfully." : "Error updating profile picture.";
        }
        else
        {
            m_Message = "No file selected.";
        }
    }
}
