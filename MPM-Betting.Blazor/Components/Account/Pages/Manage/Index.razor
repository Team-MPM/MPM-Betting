@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using MPM_Betting.DataModel.User

@inject UserManager<MpmUser> UserManager
@inject SignInManager<MpmUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@m_Username" class="form-control" placeholder="Please choose your username." disabled/>
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private MpmUser m_User = default!;
    private string? m_Username;
    private string? m_PhoneNumber;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        m_User = await UserAccessor.GetRequiredUserAsync(HttpContext);
        m_Username = await UserManager.GetUserNameAsync(m_User);
        m_PhoneNumber = await UserManager.GetPhoneNumberAsync(m_User);

        Input.PhoneNumber ??= m_PhoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != m_PhoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(m_User, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(m_User);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}