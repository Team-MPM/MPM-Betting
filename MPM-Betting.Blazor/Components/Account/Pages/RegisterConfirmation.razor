@page "/Account/RegisterConfirmation"

@using System.Text
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MPM_Betting.DataModel.User
@using MPM_Betting.Services.Account

@inject UserManager<MpmUser> UserManager
@inject IEmailSender<MpmUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<p>@m_StatusMessage</p>

@if (m_EmailConfirmationLink is not null)
{
    <p>
        @{ 
            // TODO: implement actual email sending
        }
        Normally this would be emailed: <a href="@m_EmailConfirmationLink">Click here to confirm your account</a>
    </p>
}
else
{
    <p>Please check your email to confirm your account.</p>
}

@code {
    private string? m_EmailConfirmationLink;
    private string? m_StatusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? Email { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            m_StatusMessage = "Error finding user for unspecified email";
        }
        // else if (EmailSender is IdentityNoOpEmailSender)
        // {
        //     var userId = await UserManager.GetUserIdAsync(user);
        //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        //     m_EmailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
        //         NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //         new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        // }
    }

}