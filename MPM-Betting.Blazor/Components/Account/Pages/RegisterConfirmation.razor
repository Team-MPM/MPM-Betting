@page "/Account/RegisterConfirmation"

@using System.Text
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MPM_Betting.DataModel.User
@using MPM_Betting.Services.Account
@using Blazorise
@using Color = Blazorise.Color

@inject UserManager<MpmUser> UserManager
@inject IEmailSender<MpmUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager



<PageTitle>Register confirmation</PageTitle>

<div class="AdministrationMiddleBox">
    <h1>Register confirmation</h1>
    <div class="AdministrationBox">
        <div class="BoxContent soft-bg">
            <StatusMessage Message="@m_StatusMessage"/>
            <div>Please check your email to confirm you account</div>
            <div>After that click the button below to switch to the login page</div>
            <a href="/account/login">Login</a>
        </div>
    </div>
</div>



@code {
    private string? m_EmailConfirmationLink;
    private string? m_StatusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? Email { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            m_StatusMessage = "Error finding user for unspecified email";
        }
        // else if (EmailSender is IdentityNoOpEmailSender)
        // {
        //     var userId = await UserManager.GetUserIdAsync(user);
        //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        //     m_EmailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
        //         NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //         new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        // }
    }
    private string sr { get; set; }

    private async Task RedirectToLogin()
    {
        sr = "a feafqwefw";
        NavigationManager.NavigateTo("Account/Login");
    }

}