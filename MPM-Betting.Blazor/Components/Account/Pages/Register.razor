@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MPM_Betting.DataModel.User
@using MPM_Betting.Blazor.ComponentLibrary.DesktopView

@inject UserManager<MpmUser> UserManager
@inject IUserStore<MpmUser> UserStore
@inject SignInManager<MpmUser> SignInManager
@inject IEmailSender<MpmUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="Background"/>

<div class="LoginPageMainBox">
    <div class="row">
        <NavBar Tab="NavBar.ActiveTab.Home" SportArt="NavBar.SelectedSportArt.None"/>
    </div>
    <div class="LoginPage row">
        <div class="col-1 col-sm-2 col-md-3 col-xl-4"/>
        <div class="RegisterPageContainer col-10 col-sm-8  col-md-6 col-xl-4">
            <div class="LoginTitle">Login</div>
            <div class="RegisterData">
                <EditForm class="RegisterDataBox" Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <StatusMessage Message="@Message"/>
                    <DataAnnotationsValidator/>
                    <div class="Username">
                        <label for="email">Email</label>
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        <ValidationMessage For="() => Input.Email" class="ErrorFont"/>
                    </div>
                    <div class="Password">
                        <label for="password">Password</label>
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                        <ValidationMessage For="() => Input.Password" class="ErrorFont"/>
                    </div>
                    <div class="Password">
                        <label for="confirm-password">Confirm Password</label>
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="ErrorFont"/> *@
                    </div>
                    <div class="SubmitButton">
                        <button class="SubmitButton" type="submit">Log in</button>
                    </div>
                    <div class="Error">
                        <ValidationSummary class="text-danger" role="alert"/>
                    </div>
                    <div class="OtherLoginOptions">
                        <div>
                            <div>Already have an Account?</div>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                        </div>
                        @* <div> *@
                        @*     <div>Didn't get the email?</div> *@
                        @*     <a href="Account/ResendEmailConfirmation">Resend email confirmation</a> *@
                        @* </div> *@
                    </div>
                </EditForm>
                <div class="ExternalLogin">
                    <section>
                        <h3>Use another service to log in.</h3>
                        <hr/>
                        <ExternalLoginPicker/>
                    </section>
                </div>
            </div>
        </div>
        <div class="col-1 col-sm-2 col-md-3 col-xl-4"/>
    </div>
</div>



@* <h1>Register</h1> *@
@* *@
@* <div class="row"> *@
@*     <div class="col-md-4"> *@
@*         <StatusMessage Message="@Message"/> *@
@*         <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register"> *@
@*             <DataAnnotationsValidator/> *@
@*             <h2>Create a new account.</h2> *@
@*             <hr/> *@
@*             <ValidationSummary class="text-danger" role="alert"/> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/> *@
@*                 <label for="email">Email</label> *@
@*                 <ValidationMessage For="() => Input.Email" class="text-danger"/> *@
@*             </div> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/> *@
@*                 <label for="password">Password</label> *@
@*                 <ValidationMessage For="() => Input.Password" class="text-danger"/> *@
@*             </div> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/> *@
@*                 <label for="confirm-password">Confirm Password</label> *@
@*                 <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/> *@
@*             </div> *@
@*             <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button> *@
@*         </EditForm> *@
@*     </div> *@
@*     <div class="col-md-6 col-md-offset-2"> *@
@*         <section> *@
@*             <h3>Use another service to register.</h3> *@
@*             <hr/> *@
@*             <ExternalLoginPicker/> *@
@*         </section> *@
@*     </div> *@
@* </div> *@

@code {
    private IEnumerable<IdentityError>? m_IdentityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => m_IdentityErrors is null ? null : $"Error: {string.Join(", ", m_IdentityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            m_IdentityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private MpmUser CreateUser()
    {
        return Activator.CreateInstance<MpmUser>();
    }

    private IUserEmailStore<MpmUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<MpmUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}