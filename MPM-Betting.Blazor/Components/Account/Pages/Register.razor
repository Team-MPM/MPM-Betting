@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MPM_Betting.DataModel.User

@inject UserManager<MpmUser> UserManager
@inject IUserStore<MpmUser> UserStore
@inject SignInManager<MpmUser> SignInManager
@inject IEmailSender<MpmUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class=" d-flex align-items-center justify-content-center">
    <div class="container p-5 px-8 mx-24">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center mb-5">
                <h1 class="heading-section">Register</h1>
            </div>
        </div>
        
        <div class="row justify-content-center align-center">
            <div class="col-md-6 col-lg-4 pt-4 soft-bg">
                <div class="login-wrap p-0">
                    <h3 class="mb-4 text-center">Create new account</h3>
                    <EditForm action="Account/Register" class="register-form" Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <StatusMessage Message="@Message"/>
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label for="Email" class="form-label">Email</label>
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="E-Mail"/>
                            <ValidationMessage For="() => Input.Email" class="ErrorFont"/>
                        </div>
                        <div class="form-group">
                            <label for="Password" class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password"/>
                            <ValidationMessage For="() => Input.Password" class="ErrorFont"/>
                        </div>
                        <div class="form-group">
                            <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm Password"/>
                            <ValidationMessage For="() => Input.Password" class="ErrorFont"/>
                        </div>
                        <div class="form-group d-md-flex">
                            <button class="form-control btn btn-primary submit px-3" type="submit">Register</button>
                        </div>

                    </EditForm>

                    <hr/>

                    <div class="form-group">
                        <div class="form-group text-center">
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                Existing user? Sign in here
                            </a>
                        </div>
                    </div>

                    <div class="form-group">
                        <section>
                            <hr/>
                            <h3 class="text-center">Or Sign In With</h3>
                            <hr/>
                            <div class="flex justify-content-center">
                                <ExternalLoginPicker/>
                            </div>
                        </section>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? m_IdentityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => m_IdentityErrors is null ? null : $"Error: {string.Join(", ", m_IdentityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            m_IdentityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private MpmUser CreateUser()
    {
        return Activator.CreateInstance<MpmUser>();
    }

    private IUserEmailStore<MpmUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<MpmUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}